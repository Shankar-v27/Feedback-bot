import React, { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Copy, Download, ThumbsUp, ThumbsDown, Bot, User } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Textarea } from "@/components/ui/textarea";

interface FeedbackResponse {
  id: string;
  input: string;
  output: string;
  timestamp: Date;
  rating?: 'positive' | 'negative';
}

interface FeedbackOutputProps {
  responses: FeedbackResponse[];
  onRate: (id: string, rating: 'positive' | 'negative') => void;
  onReply?: (id: string, message: string) => void;
}

export const FeedbackOutput = ({ responses, onRate, onReply }: FeedbackOutputProps) => {
  const { toast } = useToast();
  const [drafts, setDrafts] = useState<Record<string, string>>({})

  const updateDraft = (id: string, v: string) => setDrafts(prev => ({ ...prev, [id]: v }))
  const sendReply = (id: string) => {
    const text = (drafts[id] || '').trim()
    if (!text) return
    onReply?.(id, text)
    setDrafts(prev => ({ ...prev, [id]: '' }))
  }

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied to clipboard",
        description: "Feedback has been copied to your clipboard.",
      });
    } catch (error) {
      toast({
        title: "Copy failed",
        description: "Failed to copy to clipboard. Please try again.",
        variant: "destructive",
      });
    }
  };

  const exportFeedback = (response: FeedbackResponse) => {
    const content = `Feedback Session - ${response.timestamp.toLocaleString()}

Original Content:
${response.input}

AI Feedback:
${response.output}

Generated by Ollama Feedback Bot`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `feedback-${response.timestamp.getTime()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (responses.length === 0) {
    return (
      <Card className="shadow-card border-border/50">
        <div className="p-8 text-center space-y-3">
          <div className="w-16 h-16 gradient-ai rounded-2xl flex items-center justify-center shadow-ai mx-auto">
            <Bot className="w-8 h-8 text-white" />
          </div>
          <h3 className="text-lg font-semibold text-muted-foreground">
            Ready to Generate Feedback
          </h3>
          <p className="text-sm text-muted-foreground max-w-md mx-auto">
            Your AI-powered feedback will appear here. Enter some content above to get started.
          </p>
        </div>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      {responses.map((response) => (
        <Card key={response.id} className="shadow-card border-border/50 overflow-hidden">
          <div className="p-6 space-y-4">
            {/* Input Section */}
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <User className="w-4 h-4 text-muted-foreground" />
                <span className="text-sm font-medium text-muted-foreground">Your Content</span>
                <Badge variant="outline" className="text-xs">
                  {response.timestamp.toLocaleTimeString()}
                </Badge>
              </div>
              <div className="bg-muted/30 rounded-lg p-4 border-l-4 border-muted">
                <p className="text-sm whitespace-pre-wrap">{response.input}</p>
              </div>
            </div>

            {/* Output Section */}
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <div className="w-5 h-5 gradient-ai rounded-full flex items-center justify-center">
                  <Bot className="w-3 h-3 text-white" />
                </div>
                <span className="text-sm font-medium">AI Feedback</span>
                <Badge className="text-xs bg-ai-primary/10 text-ai-primary border-ai-primary/20">
                  Ollama Model
                </Badge>
              </div>
              <div className="gradient-input rounded-lg p-4 border-l-4 border-ai-primary">
                <p className="text-sm whitespace-pre-wrap leading-relaxed">{response.output}</p>
              </div>
            </div>

            {/* Actions */}
            <div className="flex items-center justify-between pt-2 border-t border-border/50">
              <div className="flex items-center gap-2">
                <Button
                  variant="ai-ghost"
                  size="sm"
                  onClick={() => onRate(response.id, 'positive')}
                  className={response.rating === 'positive' ? 'bg-ai-primary/10' : ''}
                >
                  <ThumbsUp className="w-4 h-4" />
                </Button>
                <Button
                  variant="ai-ghost"
                  size="sm"
                  onClick={() => onRate(response.id, 'negative')}
                  className={response.rating === 'negative' ? 'bg-destructive/10 text-destructive' : ''}
                >
                  <ThumbsDown className="w-4 h-4" />
                </Button>
              </div>
              
              <div className="flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => copyToClipboard(response.output)}
                >
                  <Copy className="w-4 h-4" />
                  Copy
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => exportFeedback(response)}
                >
                  <Download className="w-4 h-4" />
                  Export
                </Button>
              </div>
            </div>

            {/* Reply box */}
            {onReply && (
              <div className="mt-4 space-y-2">
                <Textarea
                  value={drafts[response.id] || ''}
                  onChange={(e) => updateDraft(response.id, e.target.value)}
                  placeholder="Write a follow-up or ask for a revision..."
                  className="min-h-[80px]"
                />
                <div className="flex justify-end">
                  <Button size="sm" onClick={() => sendReply(response.id)}>
                    Reply
                  </Button>
                </div>
              </div>
            )}
          </div>
        </Card>
      ))}
    </div>
  );
};